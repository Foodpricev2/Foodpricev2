
Modulo_2 <- function(Month, Year, City,household_type=NULL) {

  #-------------------------------------------------#
  #  Validación de parámetros de la función 2      #
  #-------------------------------------------------#

  # Función para validar parámetros
  validar_parametros <- function(parametro, tipo, rango = NULL) {
    if (missing(parametro)) {
      stop("Parameter is missing: ", deparse(substitute(parametro)))
    }

    if (!is.null(tipo)) {
      tipo_funcion <- switch(tipo,
                             "numeric" = is.numeric,
                             "character" = is.character,
                             "list" = is.list,
                             "vector" = function(x) is.vector(x) || is.data.frame(x),
                             "default" = function(x) FALSE)

      if (!tipo_funcion(parametro)) {
        stop(paste(deparse(substitute(parametro)), " Debe ser de tipo ", tipo))
      }
    }

    if (!is.null(rango) && !is.infinite(rango[1]) && !is.infinite(rango[2])) {
      if (parametro < rango[1] || parametro > rango[2]) {
        stop(paste(deparse(substitute(parametro)), " Debe estar en el rango ", rango[1], " - ", rango[2]))
      }
    }
  }

  # Función para validar el parámetro household_type
  validar_household_type <- function(household_type) {
    if (!is.data.frame(household_type)) {
      stop("household_type debe ser un dataframe.")
    }

    if (ncol(household_type) != 3) {
      stop("household_type debe tener exactamente 3 columnas.")
    }

    if (!all(c("Person", "Sex", "Demo_Group") %in% colnames(household_type))) {
      stop("household_type debe tener las columnas Person, Sex y Demo_Group.")
    }

    if (!all(sapply(household_type$Person, is.numeric))) {
      stop("La columna Person de household_type debe ser numérica.")
    }

    if (!all(household_type$Sex %in% c(0, 1))) {
      stop("La columna Sex de household_type debe contener solo valores 0 o 1.")
    }

    if (!all(sapply(household_type$Demo_Group, is.character))) {
      stop("La columna Demo_Group de household_type debe contener solo texto.")
    }
  }

  # Validar parámetros de entrada
  validar_parametros(Month, "numeric", c(1, 12))
  validar_parametros(Year, "numeric", c(2022, 2023))
  validar_parametros(City, "character")

  # Validar household_type si se proporciona
  if (!is.null(household_type)) {
    validar_household_type(household_type)
  } else {
    # Definir el hogar representativo por defecto si no se especifica otro
    household_type <- data.frame(
      Person = c(1, 2, 3),
      Sex = c(0, 1, 1),
      Demo_Group = c("31 a 50 años", "31 a 50 años", "9 a 13 años")
    )
  }

  # Mensaje de inicio del módulo
  Sys.sleep(1);cat("Módulo 0: Carga de librerías y del paquete Foodprice ")

  original_warn <- getOption("warn")

  options(warn = -1)

  # Carga de librerías
  Librerias_base <- c("here", "readxl", "tidyverse", "knitr", "moments", "xgboost", "maditr",
                      "mice", "VIM", "dplyr", "finalfit", "plyr", "hdd", "zip", "httr",
                      "caret", "nnet", "quantreg", "gridExtra", "ggpubr", "cowplot")
  if (!require("pacman")) install.packages("pacman")
  pacman::p_load(char = Librerias_base, character.only = TRUE)

  # Instalación de la librería Foodprice si no está disponible
  if (!requireNamespace("Foodprice", quietly = TRUE)) {
    devtools::install_github("Foodprice/Foodprice")
  }

  # Cargar la librería Foodprice
  library(Foodprice)
  #-------------------


  cat("     Finalizado ✓ \n")



Sys.sleep(1);cat("Módulo 1:  Reatroalimentación con el paquete Foodprice y selección de hogar representativo ")

invisible(capture.output({

  #-------------------------------------------------------------#
  #  Calculo del costo de las dietas del hogar representativo   #
  #------------------------------------------------------------#


  Data_mes_año=Foodprice::DataCol(Month = Month, Year = Year, City = City)

  modelo_1=Foodprice::CoCA(data=Data_mes_año,EER = EER)$cost
  modelo_2=Foodprice::CoNA(data=Data_mes_año,EER_LL=EER_LL,UL=UL)$cost
  modelo_3=Foodprice::CoRD(data = Data_mes_año,diverse = diverse,serv = serv)$cost

}))

#-----------------------------#
# Modelo:COCA- costo hogar Rep#
#-----------------------------#



model_dieta_1 = merge(household_type, modelo_1[c("Demo_Group", "Sex", "cost_day")],
                      by = c("Demo_Group", "Sex"),
                      all.x = TRUE, all.y = FALSE)

model_dieta_1$hogar_total = sum(as.numeric(model_dieta_1$cost_day))
model_dieta_1$per_capita = model_dieta_1$hogar_total/nrow(model_dieta_1)



#-----------------------------#
# Modelo:CONA- costo hogar Rep#
#-----------------------------#




model_dieta_2 = merge(household_type, modelo_2[c("Demo_Group", "Sex", "cost_day")],
                      by = c("Demo_Group", "Sex"),
                      all.x = TRUE, all.y = FALSE)

model_dieta_2$hogar_total = sum(as.numeric(model_dieta_2$cost_day))
model_dieta_2$per_capita = model_dieta_2$hogar_total/nrow(model_dieta_2)



#-----------------------------#
# Modelo:CORD- costo hogar Rep#
#-----------------------------#



# Definir el mapeo de grupos demográficos para el mod 3

mapeo_grupos <- list(
  ">70 años" = "> 70 años",
  "1 a 3 años" = "1-3 años",
  "14 a 18 años" = "14-18 años",
  "19 a 30 años" = "19-30 años",
  "31 a 50 años" = "31-50 años",
  "4 a 8 años" = "5 -8 años",
  "51 a 70 años" = "51-70 años",
  "9 a 13 años" = "9-13 años",
  "gestantes < 18 años" = "Gestantes 14-18 años",
  "gestantes 19 a 30 años" = "Gestantes 19-30 años",
  "gestantes 31 a 50 años" = "Gestantes 31-50 años",
  "lactantes < 18 años" = "Lactantes 14-18 años",
  "lactantes 19 a 30 años" = "Lactantes 19-30 años",
  "lactantes 31 a 50 años" = "Lactantes 31-50 años"
)

# Función para aplicar el mapeo de grupos demográficos
aplicar_mapeo <- function(df, mapeo) {
  df$Demo_Group <- mapeo[df$Demo_Group]
  return(df)
}


household_type_mod_3 <- aplicar_mapeo(household_type, mapeo_grupos)


model_dieta_3 = merge(household_type_mod_3, modelo_3[c("Demo_Group", "Sex", "cost_day")],
                      by = c("Demo_Group", "Sex"),
                      all.x = TRUE, all.y = FALSE)


model_dieta_3$hogar_total = sum(as.numeric(model_dieta_3$cost_day))
model_dieta_3$per_capita = model_dieta_3$hogar_total/nrow(model_dieta_3)

#-------------------------------#
# Calcular costo anual y mensual #
#--------------------------------#



model_dieta_1$per_capita_year = model_dieta_1$per_capita*365
model_dieta_2$per_capita_year = model_dieta_2$per_capita*365
model_dieta_3$per_capita_year = model_dieta_3$per_capita*365


model_dieta_1$per_capita_month = model_dieta_1$per_capita*30
model_dieta_2$per_capita_month = model_dieta_2$per_capita*30
model_dieta_3$per_capita_month = model_dieta_3$per_capita*30


#-----------------------------#
#     Cambiando nombres       #
#-----------------------------#

new_names_model_dieta_1 <- c(
  "Demo_Group",
  "Sex",
  "Person",
  "cost_day",
  "total_household",
  "per_capita",
  "per_capita_year",
  "per_capita_month"
)

# Cambiar los nombres de las columnas
names(model_dieta_1) <- new_names_model_dieta_1
names(model_dieta_2) <- new_names_model_dieta_1
names(model_dieta_3) <- new_names_model_dieta_1

cat("     Finalizado ✓ \n")

resultado=list(model_dieta_1,model_dieta_2,model_dieta_3);names(resultado)=c("Model_CoCA","Model_CoNA","Model_CoRD")
return(resultado)

}







































